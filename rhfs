#!/usr/bin/env rvm 2.0 do ruby
require_relative 'lib/rhfs-tools'

require 'trollop'
require 'pp'

def xbanner(name, usage, desc, extra = nil)
	usage = " #{usage}" unless usage.empty?
	extra = extra ? "#{extra}\n\n" : ""
	return <<-EOS
#{desc}

Usage: rhfs #{name} [options]#{usage}

#{extra}Options:
EOS
end

class Subcommand
	attr_reader :name, :desc, :parser
	def initialize(name, usage, desc, &block)
		@name, @desc = name, desc
		@parser = Trollop::Parser.new do
			banner xbanner(name, usage, desc)
			instance_eval(&block)
		end
	end
end

subcommands = [
	Subcommand.new(:create, "SIZE PATH",
			"Create a new sparsebundle disk image") do
		opt :partition, "Use a partition table"
		opt :format, "Include a valid HFS+ filesystem (Mac only)"
		opt :band, "Size of each band of the image", :type => :string,
			:default => Sparsebundle::DefaultBandSizeOpt
	end,
	Subcommand.new(:compact, "IMAGE", "Shrink a sparsebundle") do
		opt :apple, "Use Apple's hdiutil instead of native support (Mac only)"
		opt :search, "Reclaim more space, but take longer"
	end,
	Subcommand.new(:convert, "INPUT OUTPUT", "Convert between formats") do
		opt :raw, "Output should be a raw image"
		opt :sparsebundle, "Output should be a sparsebundle"
		opt :band, "Size of bands of output sparsebundle", :type => :string
	end,
	Subcommand.new(:access, "IMAGE PATH", "Access files from HFS+") do
		opt :output, "Location for output (instead of stdout)",
			:type => :string
	end,
	Subcommand.new(:help, "[SUBCOMMAND]", "Show help on a subcommand") { },
]
find_sub = proc { |n| subcommands.find { |s| s.name.to_s == n } }


global_parser = Trollop::Parser.new do	
	size_max = subcommands.map { |s| s.name.size }.max
	extra = "Subcommands:\n" + subcommands.map do |s|
		"  %-*s: %s" % [size_max, s.name, s.desc]
	end.join("\n")
	banner xbanner('SUBCOMMAND', '',
		'Manipulate disk images for use with SheepShaver and BasiliskII',
		extra)
	
	version "rhfs 0.1 (c) 2013 Dave Vasilevsky"
	stop_on subcommands.map { |s| s.name.to_s }
end

sub = nil
Trollop.with_standard_exception_handling global_parser do
	opts = global_parser.parse ARGV
	cmd = ARGV.shift or raise Trollop::HelpNeeded
	sub = find_sub.(cmd) or raise Trollop::CommandlineError.new(
		"unknown subcommand #{cmd.inspect}")
end

Trollop.with_standard_exception_handling sub.parser do
	opts = sub.parser.parse ARGV
	if sub.name == :help
		raise Trollop::HelpNeeded if ARGV.count > 1
		if ARGV.empty?
			global_parser.educate
		else
			scmd = find_sub.(ARGV.shift) or raise Trollop::HelpNeeded
			scmd.parser.educate
		end
		exit(-2)
	end
	
	begin
		RHFSCommands.send(sub.name, opts, *ARGV)
	rescue ArgumentError
		raise Trollop::CommandlineError.new("Wrong number of arguments")
	end
end
